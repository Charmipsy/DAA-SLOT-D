import numpy as np
from itertools import permutations

class Node:
    def __init__(self, parent, level, cost, assigned_tasks):
        self.parent = parent
        self.level = level
        self.cost = cost
        self.assigned_tasks = assigned_tasks

def calculate_cost(matrix, assignments):
    total_cost = 0
    for agent, task in enumerate(assignments):
        total_cost += matrix[agent][task]
    return total_cost

def assign_jobs(matrix):
    n = len(matrix)
    min_cost = float('inf')
    min_assignment = None
    queue = []
    root = Node(None, -1, 0, [])

    queue.append(root)

    while queue:
        current_node = queue.pop(0)
        current_level = current_node.level + 1

        if current_level == n:
            if current_node.cost < min_cost:
                min_cost = current_node.cost
                min_assignment = current_node.assigned_tasks
            continue

        for task in range(n):
            if task not in current_node.assigned_tasks:
                assigned_tasks = current_node.assigned_tasks + [task]
                cost = calculate_cost(matrix, assigned_tasks)
                if cost < min_cost:
                    child = Node(current_node, current_level, cost, assigned_tasks)
                    queue.append(child)

    return min_cost, min_assignment

if __name__ == "__main__":
    # Example usage
    matrix = np.array([[10, 2, 6, 5],
                       [8, 7, 4, 5],
                       [9, 1, 2, 9],
                       [7, 8, 3, 6]])

    min_cost, min_assignment = assign_jobs(matrix)
    print("Minimum cost:", min_cost)
    print("Assignments:", min_assignment)
